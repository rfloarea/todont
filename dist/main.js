(()=>{"use strict";var t={d:(e,o)=>{for(var r in o)t.o(o,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:o[r]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)};t.d({},{K:()=>r});const e=document.createElement("button");document.body.appendChild(e),e.textContent="Remove a TODONT",e.addEventListener("click",(function(){let t=parseInt(prompt("Which TODONT do you want to remove (use the index from the table)"));r.splice(t,1),localStorage.setItem("itemArray",JSON.stringify(r)),console.table(r)}));const o=document.createElement("button");document.body.appendChild(o),o.textContent="Clear all TODONTs",o.addEventListener("click",(function(){localStorage.clear()}));const r=(()=>{let t=localStorage.getItem("itemArray");if(t){let e=[...JSON.parse(t)];return console.table(e),e}return[]})();class n{constructor(t,e,o,r){this.title=t,this.description=e,this.duration=o,this.importance=r}getTitle(){return this.title}setTitle(t){return this.title=t}}var l;l=(()=>{let t=prompt("What don't you want to do?"),e=prompt("What is your reason?"),o=prompt("For how long will you not do this?"),r=prompt("How important is this?");const l=new n(t,e,o,r);return console.table(l),l})(),r.push(l),localStorage.setItem("itemArray",JSON.stringify(r)),console.table(r)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoibUJBQ0EsSUFBSUEsRUFBc0IsQ0NBMUJBLEVBQXdCLENBQUNDLEVBQVNDLEtBQ2pDLElBQUksSUFBSUMsS0FBT0QsRUFDWEYsRUFBb0JJLEVBQUVGLEVBQVlDLEtBQVNILEVBQW9CSSxFQUFFSCxFQUFTRSxJQUM1RUUsT0FBT0MsZUFBZUwsRUFBU0UsRUFBSyxDQUFFSSxZQUFZLEVBQU1DLElBQUtOLEVBQVdDLElBRTFFLEVDTkRILEVBQXdCLENBQUNTLEVBQUtDLElBQVVMLE9BQU9NLFVBQVVDLGVBQWVDLEtBQUtKLEVBQUtDLEksa0JDSWxGLE1BQU1JLEVBQVlDLFNBQVNDLGNBQWMsVUFDekNELFNBQVNFLEtBQUtDLFlBQVlKLEdBQzFCQSxFQUFVSyxZQUFjLGtCQUN4QkwsRUFBVU0saUJBQWlCLFNDTHBCLFdBQ0gsSUFBSUMsRUFBUUMsU0FBU0MsT0FBTyxzRUFDNUJDLEVBQVdDLE9BQU9KLEVBQU8sR0FDekJLLGFBQWFDLFFBQVEsWUFBYUMsS0FBS0MsVUFBVUwsSUFDakRNLFFBQVFDLE1BQU1QLEVBQ2xCLElERUEsTUFBTVEsRUFBV2pCLFNBQVNDLGNBQWMsVUFDeENELFNBQVNFLEtBQUtDLFlBQVljLEdBQzFCQSxFQUFTYixZQUFjLG9CQUN2QmEsRUFBU1osaUJBQWlCLFNFWm5CLFdBQ0hNLGFBQWFPLE9BQ2pCLElGWU8sTUFBTVQsRUFBYSxNQUN0QixJQUFJVSxFQUFXUixhQUFhUyxRQUFRLGFBRXBDLEdBQUlELEVBQVUsQ0FDVixJQUNJRSxFQUFZLElBRENSLEtBQUtTLE1BQU1ILElBRzVCLE9BREFKLFFBQVFDLE1BQU1LLEdBQ1BBLENBQ1gsQ0FDSSxNQUFPLEVBRWQsRUFYeUIsR0FjMUIsTUFBTUUsRUFDRixXQUFBQyxDQUFhQyxFQUFPQyxFQUFhQyxFQUFVQyxHQUN2Q0MsS0FBS0osTUFBUUEsRUFDYkksS0FBS0gsWUFBY0EsRUFDbkJHLEtBQUtGLFNBQVdBLEVBQ2hCRSxLQUFLRCxXQUFhQSxDQUN0QixDQUNBLFFBQUFFLEdBQ0ksT0FBT0QsS0FBS0osS0FDaEIsQ0FDQSxRQUFBTSxDQUFTQyxHQUNMLE9BQU9ILEtBQUtKLE1BQVFPLENBQ3hCLEVHdENKLElBQStCdEMsSUh5Q2YsTUFDWixJQUFJK0IsRUFBUWpCLE9BQU8sOEJBQ2ZrQixFQUFjbEIsT0FBTyx3QkFDckJtQixFQUFXbkIsT0FBTyxzQ0FDbEJvQixFQUFhcEIsT0FBTywwQkFDeEIsTUFBTXlCLEVBQVUsSUFBSVYsRUFBT0UsRUFBT0MsRUFBYUMsRUFBVUMsR0FFekQsT0FEQWIsUUFBUUMsTUFBTWlCLEdBQ1BBLENBQ1YsRUFSZSxHR3hDWnhCLEVBQVd5QixLQUFLeEMsR0FDaEJpQixhQUFhQyxRQUFRLFlBQWFDLEtBQUtDLFVBQVVMLElIa0RyRE0sUUFBUUMsTUFBTVAsRSIsInNvdXJjZXMiOlsid2VicGFjazovL3RvZG9udC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly90b2RvbnQvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3RvZG9udC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3RvZG9udC8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvbnQvLi9zcmMvcmVtb3ZlSXRlbS5qcyIsIndlYnBhY2s6Ly90b2RvbnQvLi9zcmMvY2xlYXJBbGxJdGVtcy5qcyIsIndlYnBhY2s6Ly90b2RvbnQvLi9zcmMvYWRkSXRlbS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGUgcmVxdWlyZSBzY29wZVxudmFyIF9fd2VicGFja19yZXF1aXJlX18gPSB7fTtcblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsImltcG9ydCB7IGFkZEl0ZW1Ub0xvY2FsU3RvcmFnZSB9IGZyb20gXCIuL2FkZEl0ZW1cIjtcbmltcG9ydCB7IHJlbW92ZUl0ZW0gfSBmcm9tIFwiLi9yZW1vdmVJdGVtXCI7XG5pbXBvcnQgeyBjbGVhckFsbEl0ZW1zIH0gZnJvbSBcIi4vY2xlYXJBbGxJdGVtc1wiO1xuXG5jb25zdCByZW1vdmVCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbmRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQocmVtb3ZlQnRuKTtcbnJlbW92ZUJ0bi50ZXh0Q29udGVudCA9IFwiUmVtb3ZlIGEgVE9ET05UXCI7XG5yZW1vdmVCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCByZW1vdmVJdGVtKTtcblxuY29uc3QgY2xlYXJCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbmRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY2xlYXJCdG4pO1xuY2xlYXJCdG4udGV4dENvbnRlbnQgPSBcIkNsZWFyIGFsbCBUT0RPTlRzXCI7XG5jbGVhckJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGNsZWFyQWxsSXRlbXMpO1xuXG5leHBvcnQgY29uc3Qgc3RvcmVkRGF0YSA9ICgoKSA9PiB7XG4gICAgbGV0IHVzZXJEYXRhID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2l0ZW1BcnJheScpXG5cbiAgICBpZiAodXNlckRhdGEpIHsgICBcbiAgICAgICAgbGV0IGl0ZW1TdHJpbmcgPSBKU09OLnBhcnNlKHVzZXJEYXRhKVxuICAgICAgICBsZXQgaXRlbUFycmF5ID0gWy4uLml0ZW1TdHJpbmddO1xuICAgICAgICBjb25zb2xlLnRhYmxlKGl0ZW1BcnJheSk7XG4gICAgICAgIHJldHVybiBpdGVtQXJyYXk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbn0pKCk7XG5cblxuY2xhc3MgVG9kb250IHtcbiAgICBjb25zdHJ1Y3RvciAodGl0bGUsIGRlc2NyaXB0aW9uLCBkdXJhdGlvbiwgaW1wb3J0YW5jZSkge1xuICAgICAgICB0aGlzLnRpdGxlID0gdGl0bGU7XG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcbiAgICAgICAgdGhpcy5kdXJhdGlvbiA9IGR1cmF0aW9uO1xuICAgICAgICB0aGlzLmltcG9ydGFuY2UgPSBpbXBvcnRhbmNlO1xuICAgIH1cbiAgICBnZXRUaXRsZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGl0bGU7XG4gICAgfVxuICAgIHNldFRpdGxlKG5ld1RpdGxlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRpdGxlID0gbmV3VGl0bGU7XG4gICAgfVxufTtcblxuY29uc3QgbmV3SXRlbSA9ICgoKSA9PiB7XG4gICAgbGV0IHRpdGxlID0gcHJvbXB0KFwiV2hhdCBkb24ndCB5b3Ugd2FudCB0byBkbz9cIik7XG4gICAgbGV0IGRlc2NyaXB0aW9uID0gcHJvbXB0KFwiV2hhdCBpcyB5b3VyIHJlYXNvbj9cIik7XG4gICAgbGV0IGR1cmF0aW9uID0gcHJvbXB0KFwiRm9yIGhvdyBsb25nIHdpbGwgeW91IG5vdCBkbyB0aGlzP1wiKTtcbiAgICBsZXQgaW1wb3J0YW5jZSA9IHByb21wdChcIkhvdyBpbXBvcnRhbnQgaXMgdGhpcz9cIik7XG4gICAgY29uc3QgbmV3SXRlbSA9IG5ldyBUb2RvbnQodGl0bGUsIGRlc2NyaXB0aW9uLCBkdXJhdGlvbiwgaW1wb3J0YW5jZSk7XG4gICAgY29uc29sZS50YWJsZShuZXdJdGVtKTtcbiAgICByZXR1cm4gbmV3SXRlbTtcbn0pKCk7XG5cbmFkZEl0ZW1Ub0xvY2FsU3RvcmFnZShuZXdJdGVtKTtcbmNvbnNvbGUudGFibGUoc3RvcmVkRGF0YSk7IiwiaW1wb3J0IHsgc3RvcmVkRGF0YSB9IGZyb20gXCIuXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVJdGVtKCkge1xuICAgIGxldCBpbmRleCA9IHBhcnNlSW50KHByb21wdChcIldoaWNoIFRPRE9OVCBkbyB5b3Ugd2FudCB0byByZW1vdmUgKHVzZSB0aGUgaW5kZXggZnJvbSB0aGUgdGFibGUpXCIpKTtcbiAgICBzdG9yZWREYXRhLnNwbGljZShpbmRleCwgMSk7XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2l0ZW1BcnJheScsIEpTT04uc3RyaW5naWZ5KHN0b3JlZERhdGEpKTtcbiAgICBjb25zb2xlLnRhYmxlKHN0b3JlZERhdGEpO1xufTsgICIsImV4cG9ydCBmdW5jdGlvbiBjbGVhckFsbEl0ZW1zKCkge1xuICAgIGxvY2FsU3RvcmFnZS5jbGVhcigpXG59OyIsImltcG9ydCB7IHN0b3JlZERhdGEgfSBmcm9tIFwiLlwiO1xuXG5mdW5jdGlvbiBhZGRJdGVtVG9Mb2NhbFN0b3JhZ2Uob2JqKSB7XG4gICAgc3RvcmVkRGF0YS5wdXNoKG9iaik7ICAgIFxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdpdGVtQXJyYXknLCBKU09OLnN0cmluZ2lmeShzdG9yZWREYXRhKSk7XG59XG5cbmV4cG9ydCB7IGFkZEl0ZW1Ub0xvY2FsU3RvcmFnZSB9OyJdLCJuYW1lcyI6WyJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiZXhwb3J0cyIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0Iiwib2JqIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInJlbW92ZUJ0biIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImJvZHkiLCJhcHBlbmRDaGlsZCIsInRleHRDb250ZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImluZGV4IiwicGFyc2VJbnQiLCJwcm9tcHQiLCJzdG9yZWREYXRhIiwic3BsaWNlIiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsIkpTT04iLCJzdHJpbmdpZnkiLCJjb25zb2xlIiwidGFibGUiLCJjbGVhckJ0biIsImNsZWFyIiwidXNlckRhdGEiLCJnZXRJdGVtIiwiaXRlbUFycmF5IiwicGFyc2UiLCJUb2RvbnQiLCJjb25zdHJ1Y3RvciIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJkdXJhdGlvbiIsImltcG9ydGFuY2UiLCJ0aGlzIiwiZ2V0VGl0bGUiLCJzZXRUaXRsZSIsIm5ld1RpdGxlIiwibmV3SXRlbSIsInB1c2giXSwic291cmNlUm9vdCI6IiJ9