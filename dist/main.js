(()=>{"use strict";var t={d:(e,o)=>{for(var n in o)t.o(o,n)&&!t.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:o[n]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)};t.d({},{K:()=>r});const e=document.createElement("button");document.body.appendChild(e),e.textContent="Remove a TODONT",e.addEventListener("click",(function(){let t=parseInt(prompt("Which TODONT do you want to remove (use the index from the table)"));r.splice(t,1),localStorage.setItem("itemArray",JSON.stringify(r)),console.table(r)}));const o=document.createElement("button");document.body.appendChild(o),o.textContent="Clear all TODONTs",o.addEventListener("click",(function(){localStorage.clear()}));const n=document.createElement("button");document.body.appendChild(n),n.textContent="Edit a TODONT",n.addEventListener("click",(function(){let t=parseInt(prompt("Which TODONT do you want to edit? (use index)"));console.log(typeof t);let e=prompt("what do you want to edit? (use key)");const o=r[t];console.table(o),"title"==e?(o.title=prompt("Edit title"),console.table(o)):"description"==e?(o.description=prompt("Edit description"),console.table(o)):"duration"==e?(o.duration=prompt("Edit duration"),console.table(o)):"importance"==e&&(o.importance=prompt("Edit importance"),console.table(o)),console.table(r)}));const r=(()=>{let t=localStorage.getItem("itemArray");if(t){let e=[...JSON.parse(t)];return console.table(e),e}return[]})();class i{constructor(t,e,o,n){this.title=t,this.description=e,this.duration=o,this.importance=n}setTitle(){let t=prompt("Edit title");return this.title=t}setDescription(){let t=prompt("Edit description");return this.description=t}setDuration(){let t=prompt("Edit duration");return this.duration=t}setImportant(){let t=prompt("Edit importance");return this.importance=t}}var a;a=(()=>{let t=prompt("What don't you want to do?"),e=prompt("What is your reason?"),o=prompt("For how long will you not do this?"),n=prompt("How important is this?");const r=new i(t,e,o,n);return console.table(r),r})(),r.push(a),localStorage.setItem("itemArray",JSON.stringify(r)),console.table(r)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,